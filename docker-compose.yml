

services:

  collector:
    image: otel/opentelemetry-collector-contrib
    container_name: otel-collector
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    # ports:
      # - 1888:1888 # pprof extension
      # - 8888:8888 # Prometheus metrics exposed by the Collector
      # - 8889:8889 # Prometheus exporter metrics
      # - 13133:13133 # health_check extension
      # - 4317:4317 # OTLP gRPC receiver
      # - 4318:4318 # OTLP http receiver
      # - 55679:55679 # zpages extension
    depends_on:
      - jaeger
      - loki
      - tempo
      - prometheus
    networks:
      - poc-otel-golang

  loki:
    image: grafana/loki:latest
    container_name: loki
    # ports:
    #   - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - poc-otel-golang

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    user: root
    # entrypoint:
    #   - "chown"
    #   - "10001:10001"
    #   - "/var/tempo"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
    networks:
      - poc-otel-golang
    depends_on:
      - prometheus
    #   - ./tempo-data:/var/tempo
    # ports:
      # - "3200" # tempo
      # - "4317" # otlp grpc

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: root
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    networks:
      - poc-otel-golang


  jaeger:
    image: cr.jaegertracing.io/jaegertracing/jaeger:2.8.0
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - 16686:16686 # ui
      # - 4317:4317
      # - 4318:4318
      # - 5778:5778
      # - 9411:9411
    networks:
      - poc-otel-golang

  app:
    image: example/app
    build:
      dockerfile: ./dockerfile
      context: ./apps
    container_name: app
    ports:
      - "3333:3333"
    environment:
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317
      # - OTEL_SERVICE_NAME
      # - OTEL_SERVICE_VERSION
      # - OTEL_RESOURCE_ATTRIBUTES
    networks:
      - poc-otel-golang
    depends_on:
      - collector

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_LOG_LEVEL=debug
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana-datasource.yaml:/etc/grafana/provisioning/datasources/ds.yaml
      - ./grafana-dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./dashboards:/var/lib/grafana/dashboards
    networks:
      - poc-otel-golang
    depends_on:
      - loki
      - prometheus
      - tempo

networks:
  poc-otel-golang:
    driver: bridge

volumes:
  grafana-storage: